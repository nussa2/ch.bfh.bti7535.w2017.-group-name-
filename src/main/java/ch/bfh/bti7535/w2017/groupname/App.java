package ch.bfh.bti7535.w2017.groupname;

import ch.bfh.bti7535.w2017.groupname.console.Console;
import ch.bfh.bti7535.w2017.groupname.console.NoFilesGeneratedException;
import ch.bfh.bti7535.w2017.groupname.console.Option;
import ch.bfh.bti7535.w2017.groupname.process.*;

import java.time.Instant;

/**
 * Hello world!
 */
public class App {

    /**
     * Hauptprogramm zum generieren der ARFF-Files im Temp-Ordner (PP_....) und zum Validieren Run-Configs sind im .idea-Ordner zur Verfügung gestellt
     *
     * @param args Die durchzuführende Aktion
     */
    public static void main(String[] args) {
        Console.clear();
        Console console = new Console();

        console.addOption(new Option("PP_Validate_Best_Result", "For Mr. Vogel: our best result, evaluated from arff generated by ChainConfigNGramAttrSel", () -> {
            try {

                String fileName = "PP_NGramAttributeSelection.arff";
                ChainConfigCVNBDemo filterChain = new ChainConfigCVNBDemo();
                filterChain.setFilePath(fileName);
                CVEvaluationChainProcessor cvEvaluationChainProcessor = new CVEvaluationChainProcessor();
                cvEvaluationChainProcessor.process(filterChain);
                System.out.println("Error Rate: " + cvEvaluationChainProcessor.getValidationResultErrorRate());
            } catch (Exception e) {
                e.printStackTrace();
            }
            System.out.println("Finished Validate at " + Instant.now().toEpochMilli());
        }));

        console.addOption(new Option("PP_SentimentLexiconCount", "Preprocess data, extract features and generate ARFF", () -> {
            try {
                // Erfolgsquote: 63.4%
                ChainConfigSentimentLexicon sentimentLexiconChain = new ChainConfigSentimentLexicon();
                new DefaultChainProcessor().process(sentimentLexiconChain);
            } catch (Exception e) {
                e.printStackTrace();
            }
            System.out.println("Finished PP_SentimentLexiconCount at " + Instant.now().toEpochMilli());
        }));

        console.addOption(new Option("PP_SentimentLexiconPercent", "Preprocess data, extract features and generate ARFF", () -> {
            try {
                // Erfolgsquote: 63.5%
                ChainConfigSentimentPercentLexicon sentimentLexiconPercentChain = new ChainConfigSentimentPercentLexicon();
                new DefaultChainProcessor().process(sentimentLexiconPercentChain);
            } catch (Exception e) {
                e.printStackTrace();
            }
            System.out.println("Finished PP_SentimentLexiconPercent at " + Instant.now().toEpochMilli());
        }));

        console.addOption(new Option("PP_SentimentLexiconWeight", "Preprocess data, extract features and generate ARFF", () -> {
            try {
                ChainConfigSentimentWeightLexicon sentimentLexiconWeightedChain = new ChainConfigSentimentWeightLexicon();
                new DefaultChainProcessor().process(sentimentLexiconWeightedChain);
            } catch (Exception e) {
                e.printStackTrace();
            }
            System.out.println("Finished PP_SentimentLexiconWeight at " + Instant.now().toEpochMilli());
        }));

        console.addOption(new Option("PP_AttributeSelection", "Preprocess data, extract features and generate ARFF", () -> {
            try {
                // Erfolgsquote: 78.8%
                ChainConfigVectorAttSelect vectorASChain = new ChainConfigVectorAttSelect();
                new DefaultChainProcessor().process(vectorASChain);
            } catch (Exception e) {
                e.printStackTrace();
            }
            System.out.println("Finished PP_AttributeSelection at " + Instant.now().toEpochMilli());
        }));

        console.addOption(new Option("PP_RankAttributeSelection", "Preprocess data, extract features and generate ARFF", () -> {
            try {

                ChainConfigRankAttSelect vectorASChain = new ChainConfigRankAttSelect();
                new DefaultChainProcessor().process(vectorASChain);
            } catch (Exception e) {
                e.printStackTrace();
            }
            System.out.println("Finished PP_RankAttributeSelection at " + Instant.now().toEpochMilli());
        }));

        console.addOption(new Option("PP_NGramAttributeSelection", "Preprocess data, extract features and generate ARFF", () -> {
            try {
                // Erfolgsquote: 81.5%
                ChainConfigNGramAttrSel vectorASChain = new ChainConfigNGramAttrSel();
                new DefaultChainProcessor().process(vectorASChain);
            } catch (Exception e) {
                e.printStackTrace();
            }
            System.out.println("Finished PP_NGramAttributeSelection at " + Instant.now().toEpochMilli());
        }));

        console.addOption(new Option("PP_Validate_SentimentLexiconWeight", "Preprocess and Validate with Sentiment Lexicon", () -> {
            try {
                ChainConfigSentimentAttrSelCVNB filterChain = new ChainConfigSentimentAttrSelCVNB();
                CVEvaluationChainProcessor cvEvaluationChainProcessor = new CVEvaluationChainProcessor();
                cvEvaluationChainProcessor.process(filterChain);
                System.out.println("Error Rate: " + cvEvaluationChainProcessor.getValidationResultErrorRate());
                
            } catch (Exception e) {
                e.printStackTrace();
            }
            System.out.println("Finished Validate at " + Instant.now().toEpochMilli());
        }));

        console.addOption(new Option("Validate", "Validate a created ARFF", () -> {
            try {
                String filePath = Console.selectFile("/temp/movie-sa");

                ChainConfigCVNB filterChain = new ChainConfigCVNB();
                filterChain.setFilePath(filePath);
                CVEvaluationChainProcessor cvEvaluationChainProcessor = new CVEvaluationChainProcessor();
                cvEvaluationChainProcessor.process(filterChain);
                System.out.println("Error Rate: " + cvEvaluationChainProcessor.getValidationResultErrorRate());

            } catch (NoFilesGeneratedException e) {
                System.out.println("No files found! Have you generated some files yet?");
            } catch (Exception e) {
                e.printStackTrace();
            }
            System.out.println("Finished Validate at " + Instant.now().toEpochMilli());
        }));

        console.addOption(new Option("Exit", "Leave the program", () -> {
            System.exit(0);
        }));

        console.printAndWait();
    }

}
